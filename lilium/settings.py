"""
lilium.settings
~~~~~~~~~~~~~~~

Django settings for the Lilium project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/

:copyright: (c) 2018 Paolo Paolo Bernardi.
:license: GNU AGPL version 3, see LICENSE for more details.
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "0m(o*2-x@asyh@s_!6#%!uq$-y-=%$$q+xa!7@j#3m68o8rm2o"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
]

# Application definition

INSTALLED_APPS = [
    "cecilia.apps.CeciliaConfig",
    "dahlia.apps.DahliaConfig",
    "pbots.apps.PbotsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "lilium.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # Templates shared by multiple apps
            os.path.join(BASE_DIR, "lilium", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "lilium.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/Rome"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(os.getenv("HOME"), "github/lilium/static")
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(BASE_DIR, "lilium/static/"),
    os.path.join(BASE_DIR, "cecilia/static/"),
    os.path.join(BASE_DIR, "dahlia/static/"),
    os.path.join(BASE_DIR, "pbots/static/"),
)

# Logging
# https://docs.djangoproject.com/en/2.1/topics/logging/

LOGGING_DIR = os.path.join(BASE_DIR, "logs")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "{asctime} {name} {levelname} {process:d} {thread:d} {message}",
            "style": "{",
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOGGING_DIR, "main.log"),
            "formatter": "standard",
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 3,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

# Personalised handlers and loggers for PBOTS scraper.
# Useful, since they run as separate and potentially time-overlapped threads.

SCRAPING_SOURCES = [
    "bollettino_regione_umbria_generale",
    "bollettino_regione_umbria_avvisi",
    "bollettino_regione_umbria_informazioni",
    "albopretorio_comune_acquasparta",
    "albopretorio_comune_montecastrilli",
    "matrimoni_comune_montecastrilli",
    "albopretorio_ic_defilis",
]
for source in SCRAPING_SOURCES:
    LOGGING["handlers"]["file_{}".format(source)] = {
        "level": "DEBUG",
        "class": "logging.handlers.RotatingFileHandler",
        "filename": os.path.join(LOGGING_DIR, "{}.log".format(source)),
        "formatter": "standard",
        "maxBytes": 5 * 1024 * 1024,
        "backupCount": 3,
    }
    LOGGING["loggers"]["commands.{}".format(source)] = {
        "handlers": ["console", "file_{}".format(source)],
        "level": "DEBUG",
        "propagate": True,
    }

# Login/logout
# https://wsvincent.com/django-user-authentication-tutorial-login-and-logout/

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Floor maps PNG images.
# Keys are sensor names and values are the absolute paths of the PNG images

CECILIA_BLUEPRINTS = {}

# Security-sensitive and machine-dependent settings should go to local_settings.py
# https://www.agileleaf.com/blog/a-better-way-to-manage-settings-py-in-your-django-projects/

try:
    # pylint: disable=wildcard-import,unused-wildcard-import
    # Rationale:
    #   - Bulk-import of the local_settings variables on is done purpose
    #     to allow seamless overwriting capability of settings parameters.
    from .local_settings import *
except ImportError:
    raise Exception(
        "A local_settings.py file is required to run this project (see README.md)")
